[I]
Question number: 121
Title: Best Time to Buy and Sell Stock
description: given an array named prices. price of a particular stock on different days. need to return the max_profit(buy one day and sell another day to achieve max).
Approch: 
1] select first day keep it as best_buy as we cant sell the first day. 
2] from 2nd day check for price if greater than best_buy calculate profit and compare with max_profit [0 initially] (update if greater)
3] else update best buy to prices[i]
code:

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int max_profit=0;
        int best_buy=prices[0];
        int n=prices.size();
        for(int i=1; i<n; i++){
            if(prices[i]>best_buy){
            max_profit=max(max_profit, prices[i]-best_buy);
            }
            else{
            best_buy= prices[i];
            }
        }
        return max_profit;
    }
};

[II]
Question number: 11
Title: Container with most water
description: given a array with heigh of walls. make containers using two walls which can fit most water, the conatiners are distanced in the order of the elements of the array.
Approch: 
1] take two pointers starting from front and back.
2] calculate volume=(back-front)*min(height[front], height[back])
3] compare current volume with max_vol (initially 0) update it if greater
4]now if front is less than back, move front forward else move back backwards.
5] continue this till back becomes <= front.
code:

class Solution {
public:
    int maxArea(vector<int>& height) {
        int lp=0;
        int rp=height.size()-1;
        int max_vol = 0;
        while(lp<rp){
            int vol = (rp-lp)*min(height[lp],height[rp]);
            max_vol=max(max_vol, vol);
            height[lp]<height[rp] ? lp++ : rp--;
        }
        return max_vol;
    }
};