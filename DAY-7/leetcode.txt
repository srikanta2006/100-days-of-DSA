[I]
Question number: 50
Title: Pow(x,n)
description: provided x and n calculate power of x raised to n using O(log n) time complexity.
Approch: 
1] take binary bits of the power from back and if it 1 multiply x to the answer.
2] if it zero dont multiply
3] in common after each bit shift make x=x*x  (squared).
4] we get ans as the original answer after all bits are traversed.
code:

class Solution {
public:
    double myPow(double x, int n) {
        double ans=1;
        long binary=n;
        if(n<0){
            x=1/x;
            binary=-binary;
        }

        while(binary>0){
            if(binary%2==1){
                ans=ans*x;
            }
            x=x*x;
            binary=binary/2;
        }
        return ans;
    }
};


[II]
Question number: 268
Title: Missing number
description: given array of range 0-n where n is the size of array, includes all elements from 0-n except for 1, find and return 
Approch: 
1] calculate range sum from 0-n and sum of elements 
2] return difference.
code:

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int nums_sum=0;
        int n =nums.size();
        int range_sum = n*(n+1)/2;

        for(int ele : nums){
         nums_sum+=ele;
        }
        return range_sum-nums_sum;

    }
};